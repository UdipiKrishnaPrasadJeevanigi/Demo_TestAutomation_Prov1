pipeline {
    agent {
        docker {
            image 'maven:3.9-amazoncorretto-17'
            args '-v /var/run/docker.sock:/var/run/docker.sock --privileged'
        }
    }

    options {
        skipStagesAfterUnstable()
    }

    stages {
        stage('Setup Chrome and ChromeDriver') {
            steps {
                sh '''
                    # Update package list and install required dependencies
                    apt-get update
                    apt-get install -y wget gnupg2 curl unzip
                    apt-get install -y libnss3 libgbm1 libasound2

                    # Add Google Chrome repository
                    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
                    echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list

                    # Install Google Chrome
                    apt-get update
                    apt-get install -y google-chrome-stable

                    # Install ChromeDriver
                    CHROME_VERSION=$(google-chrome --version | cut -d " " -f3 | cut -d "." -f1)
                    CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
                    wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
                    unzip -q chromedriver_linux64.zip
                    mv chromedriver /usr/local/bin/
                    chmod +x /usr/local/bin/chromedriver
                '''
            }
        }

        stage('Build') {
            steps {
                sh 'mvn -B clean compile'
            }
        }

        stage('Test') {
            steps {
                sh '''
                    # Set display for Chrome
                    export DISPLAY=:99

                    # Run tests
                    mvn -B test
                '''
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Package') {
            steps {
                sh 'mvn -B package'
            }
        }
    }

    post {
        success {
            echo 'Build and tests completed successfully!'
        }
        failure {
            echo 'Build or tests failed!'
        }
        always {
            cleanWs()
        }
    }
}